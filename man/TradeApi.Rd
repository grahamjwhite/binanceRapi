% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trade_api.R
\docType{class}
\name{TradeApi}
\alias{TradeApi}
\title{Trade operations}
\format{
An \code{R6Class} generator object
}
\description{
binanceRapi.Trade
}
\section{Methods}{

\describe{
\strong{ ApiV3AccountGet } \emph{ Account Information (USER_DATA) }
Get current account information.  Weight(IP): 10

\itemize{
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } \link{Account} \cr


\item status code : 200 | Account details

\item return type : Account 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3AllOrderListGet } \emph{ Query all OCO (USER_DATA) }
Retrieves all OCO based on provided optional parameters  Weight(IP): 10

\itemize{
\item \emph{ @param } from.id integer
\item \emph{ @param } start.time integer
\item \emph{ @param } end.time integer
\item \emph{ @param } limit integer
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } list( \link{inline_response_200_6} ) \cr


\item status code : 200 | List of OCO orders

\item return type : array[InlineResponse2006] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3AllOrdersGet } \emph{ All Orders (USER_DATA) }
Get all account orders; active, canceled, or filled..  - If &#x60;orderId&#x60; is set, it will get orders &gt;&#x3D; that &#x60;orderId&#x60;. Otherwise most recent orders are returned. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time. - If &#x60;startTime&#x60; and/or &#x60;endTime&#x60; provided, &#x60;orderId&#x60; is not required  Weight(IP): 10

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } order.id integer
\item \emph{ @param } start.time integer
\item \emph{ @param } end.time integer
\item \emph{ @param } limit integer
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } list( \link{orderDetails} ) \cr


\item status code : 200 | Current open orders

\item return type : array[OrderDetails] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3MyTradesGet } \emph{ Account Trade List (USER_DATA) }
Get trades for a specific account and symbol.  If &#x60;fromId&#x60; is set, it will get id &gt;&#x3D; that &#x60;fromId&#x60;. Otherwise most recent orders are returned.  Weight(IP): 10

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } order.id integer
\item \emph{ @param } start.time integer
\item \emph{ @param } end.time integer
\item \emph{ @param } from.id integer
\item \emph{ @param } limit integer
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } list( \link{myTrade} ) \cr


\item status code : 200 | List of trades

\item return type : array[MyTrade] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OpenOrderListGet } \emph{ Query Open OCO (USER_DATA) }
Weight(IP): 3

\itemize{
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } list( \link{inline_response_200_7} ) \cr


\item status code : 200 | List of OCO orders

\item return type : array[InlineResponse2007] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OpenOrdersDelete } \emph{ Cancel all Open Orders on a Symbol (TRADE) }
Cancels all active orders on a symbol.\\ This includes OCO orders.  Weight(IP): 1

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } list( \link{anyOf&lt;order,ocoOrder&gt;} ) \cr


\item status code : 200 | Cancelled orders

\item return type : array[AnyOforderocoOrder] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OpenOrdersGet } \emph{ Current Open Orders (USER_DATA) }
Get all open orders on a symbol. Careful when accessing this with no symbol.  Weight(IP):\\ &#x60;3&#x60; for a single symbol;\\ &#x60;40&#x60; when the symbol parameter is omitted;

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } list( \link{orderDetails} ) \cr


\item status code : 200 | Current open orders

\item return type : array[OrderDetails] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OrderDelete } \emph{ Cancel Order (TRADE) }
Cancel an active order.  Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent.  Weight(IP): 1

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } order.id integer
\item \emph{ @param } orig.client.order.id character
\item \emph{ @param } new.client.order.id character
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } \link{Order} \cr


\item status code : 200 | Cancelled order

\item return type : Order 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OrderGet } \emph{ Query Order (USER_DATA) }
Check an order&#39;s status.  - Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. - For some historical orders &#x60;cummulativeQuoteQty&#x60; will be &lt; 0, meaning the data is not available at this time.  Weight(IP): 2

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } order.id integer
\item \emph{ @param } orig.client.order.id character
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } \link{OrderDetails} \cr


\item status code : 200 | Order details

\item return type : OrderDetails 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OrderListDelete } \emph{ Cancel OCO (TRADE) }
Cancel an entire Order List  Canceling an individual leg will cancel the entire OCO  Weight(IP): 1

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } order.list.id integer
\item \emph{ @param } list.client.order.id character
\item \emph{ @param } new.client.order.id character
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } \link{OcoOrder} \cr


\item status code : 200 | Report on deleted OCO

\item return type : OcoOrder 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OrderListGet } \emph{ Query OCO (USER_DATA) }
Retrieves a specific OCO based on provided optional parameters  Weight(IP): 2

\itemize{
\item \emph{ @param } order.list.id integer
\item \emph{ @param } orig.client.order.id character
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } \link{InlineResponse2005} \cr


\item status code : 200 | OCO details

\item return type : InlineResponse2005 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OrderOcoPost } \emph{ New OCO (TRADE) }
Send in a new OCO  - Price Restrictions:   - &#x60;SELL&#x60;: Limit Price &gt; Last Price &gt; Stop Price   - &#x60;BUY&#x60;: Limit Price &lt; Last Price &lt; Stop Price - Quantity Restrictions:     - Both legs must have the same quantity     - &#x60;ICEBERG&#x60; quantities however do not have to be the same - Order Rate Limit     - &#x60;OCO&#x60; counts as 2 orders against the order rate limit.      Weight(IP): 1

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } side Enum < [SELL, BUY] >
\item \emph{ @param } quantity numeric
\item \emph{ @param } price numeric
\item \emph{ @param } stop.price numeric
\item \emph{ @param } list.client.order.id character
\item \emph{ @param } limit.client.order.id character
\item \emph{ @param } limit.iceberg.qty numeric
\item \emph{ @param } stop.client.order.id character
\item \emph{ @param } stop.limit.price numeric
\item \emph{ @param } stop.iceberg.qty numeric
\item \emph{ @param } stop.limit.time.in.force Enum < [GTC, FOK, IOC] >
\item \emph{ @param } new.order.resp.type Enum < [ACK, RESULT, FULL] >
\item \emph{ @param } side.effect.type Enum < [NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY] >
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } \link{InlineResponse2004} \cr


\item status code : 200 | New OCO details

\item return type : InlineResponse2004 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OrderPost } \emph{ New Order (TRADE) }
Send in a new order.  - &#x60;LIMIT_MAKER&#x60; are &#x60;LIMIT&#x60; orders that will be rejected if they would immediately match and trade as a taker. - &#x60;STOP_LOSS&#x60; and &#x60;TAKE_PROFIT&#x60; will execute a &#x60;MARKET&#x60; order when the &#x60;stopPrice&#x60; is reached. - Any &#x60;LIMIT&#x60; or &#x60;LIMIT_MAKER&#x60; type order can be made an iceberg order by sending an &#x60;icebergQty&#x60;. - Any order with an &#x60;icebergQty&#x60; MUST have &#x60;timeInForce&#x60; set to &#x60;GTC&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quantity&#x60; specifies how much a user wants to buy or sell based on the market price. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; specifies the amount the user wants to spend (when buying) or receive (when selling) of the quote asset; the correct quantity will be determined based on the market liquidity and &#x60;quoteOrderQty&#x60;. - &#x60;MARKET&#x60; orders using &#x60;quoteOrderQty&#x60; will not break &#x60;LOT_SIZE&#x60; filter rules; the order will execute a quantity that will have the notional value as close as possible to &#x60;quoteOrderQty&#x60;. - same &#x60;newClientOrderId&#x60; can be accepted only when the previous one is filled, otherwise the order will be rejected.  Trigger order price rules against market price for both &#x60;MARKET&#x60; and &#x60;LIMIT&#x60; versions:  - Price above market price: &#x60;STOP_LOSS&#x60; &#x60;BUY&#x60;, &#x60;TAKE_PROFIT&#x60; &#x60;SELL&#x60; - Price below market price: &#x60;STOP_LOSS&#x60; &#x60;SELL&#x60;, &#x60;TAKE_PROFIT&#x60; &#x60;BUY&#x60;   Weight(IP): 1

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } side Enum < [SELL, BUY] >
\item \emph{ @param } type Enum < [LIMIT, MARKET, STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, TAKE_PROFIT_LIMIT, LIMIT_MAKER] >
\item \emph{ @param } time.in.force Enum < [GTC, IOC, FOK] >
\item \emph{ @param } quantity numeric
\item \emph{ @param } quote.order.qty numeric
\item \emph{ @param } price numeric
\item \emph{ @param } new.client.order.id character
\item \emph{ @param } stop.price numeric
\item \emph{ @param } iceberg.qty numeric
\item \emph{ @param } new.order.resp.type Enum < [ACK, RESULT, FULL] >
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } \link{OneOforderResponseAckorderResponseResultorderResponseFull} \cr


\item status code : 200 | Order result

\item return type : OneOforderResponseAckorderResponseResultorderResponseFull 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3OrderTestPost } \emph{ Test New Order (TRADE) }
Test new order creation and signature/recvWindow long. Creates and validates a new order but does not send it into the matching engine.  Weight(IP): 1

\itemize{
\item \emph{ @param } symbol character
\item \emph{ @param } side Enum < [SELL, BUY] >
\item \emph{ @param } type Enum < [LIMIT, MARKET, STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, TAKE_PROFIT_LIMIT, LIMIT_MAKER] >
\item \emph{ @param } time.in.force Enum < [GTC, IOC, FOK] >
\item \emph{ @param } quantity numeric
\item \emph{ @param } quote.order.qty numeric
\item \emph{ @param } price numeric
\item \emph{ @param } new.client.order.id character
\item \emph{ @param } stop.price numeric
\item \emph{ @param } iceberg.qty numeric
\item \emph{ @param } new.order.resp.type Enum < [ACK, RESULT, FULL] >
\item \emph{ @param } recv.window integer


\item status code : 200 | OK

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3RateLimitOrderGet } \emph{ Query Current Order Count Usage (TRADE) }
Displays the user&#39;s current order count usage for all intervals.  Weight(IP): 20

\itemize{
\item \emph{ @param } recv.window integer
\item \emph{ @returnType } list( \link{inline_response_200_8} ) \cr


\item status code : 200 | Order rate limits

\item return type : array[InlineResponse2008] 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
\item status code : 401 | Unauthorized Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  ApiV3AccountGet  ####################

library(binanceRapi)
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Account Information (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3AccountGet(recv.window=var.recv.window)


####################  ApiV3AllOrderListGet  ####################

library(binanceRapi)
var.from.id <- 56 # integer | Trade id to fetch from. Default gets most recent trades.
var.start.time <- 56 # integer | UTC timestamp in ms
var.end.time <- 56 # integer | UTC timestamp in ms
var.limit <- 500 # integer | Default 500; max 1000.
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Query all OCO (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3AllOrderListGet(from.id=var.from.id, start.time=var.start.time, end.time=var.end.time, limit=var.limit, recv.window=var.recv.window)


####################  ApiV3AllOrdersGet  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.order.id <- 56 # integer | Order id
var.start.time <- 56 # integer | UTC timestamp in ms
var.end.time <- 56 # integer | UTC timestamp in ms
var.limit <- 500 # integer | Default 500; max 1000.
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#All Orders (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3AllOrdersGet(var.symbol, order.id=var.order.id, start.time=var.start.time, end.time=var.end.time, limit=var.limit, recv.window=var.recv.window)


####################  ApiV3MyTradesGet  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.order.id <- 56 # integer | This can only be used in combination with symbol.
var.start.time <- 56 # integer | UTC timestamp in ms
var.end.time <- 56 # integer | UTC timestamp in ms
var.from.id <- 56 # integer | Trade id to fetch from. Default gets most recent trades.
var.limit <- 500 # integer | Default 500; max 1000.
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Account Trade List (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3MyTradesGet(var.symbol, order.id=var.order.id, start.time=var.start.time, end.time=var.end.time, from.id=var.from.id, limit=var.limit, recv.window=var.recv.window)


####################  ApiV3OpenOrderListGet  ####################

library(binanceRapi)
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Query Open OCO (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OpenOrderListGet(recv.window=var.recv.window)


####################  ApiV3OpenOrdersDelete  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Cancel all Open Orders on a Symbol (TRADE)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OpenOrdersDelete(var.symbol, recv.window=var.recv.window)


####################  ApiV3OpenOrdersGet  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Current Open Orders (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OpenOrdersGet(symbol=var.symbol, recv.window=var.recv.window)


####################  ApiV3OrderDelete  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.order.id <- 56 # integer | Order id
var.orig.client.order.id <- 'orig.client.order.id_example' # character | Order id from client
var.new.client.order.id <- 'new.client.order.id_example' # character | Used to uniquely identify this cancel. Automatically generated by default
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Cancel Order (TRADE)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OrderDelete(var.symbol, order.id=var.order.id, orig.client.order.id=var.orig.client.order.id, new.client.order.id=var.new.client.order.id, recv.window=var.recv.window)


####################  ApiV3OrderGet  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.order.id <- 56 # integer | Order id
var.orig.client.order.id <- 'orig.client.order.id_example' # character | Order id from client
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Query Order (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OrderGet(var.symbol, order.id=var.order.id, orig.client.order.id=var.orig.client.order.id, recv.window=var.recv.window)


####################  ApiV3OrderListDelete  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.order.list.id <- 56 # integer | Order list id
var.list.client.order.id <- 'list.client.order.id_example' # character | A unique Id for the entire orderList
var.new.client.order.id <- 'new.client.order.id_example' # character | Used to uniquely identify this cancel. Automatically generated by default
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Cancel OCO (TRADE)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OrderListDelete(var.symbol, order.list.id=var.order.list.id, list.client.order.id=var.list.client.order.id, new.client.order.id=var.new.client.order.id, recv.window=var.recv.window)


####################  ApiV3OrderListGet  ####################

library(binanceRapi)
var.order.list.id <- 56 # integer | Order list id
var.orig.client.order.id <- 'orig.client.order.id_example' # character | Order id from client
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Query OCO (USER_DATA)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OrderListGet(order.list.id=var.order.list.id, orig.client.order.id=var.orig.client.order.id, recv.window=var.recv.window)


####################  ApiV3OrderOcoPost  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.side <- 'SELL' # character | SELL or BUY
var.quantity <- 3.4 # numeric | 
var.price <- 3.4 # numeric | Order price
var.stop.price <- 3.4 # numeric | 
var.list.client.order.id <- 'list.client.order.id_example' # character | A unique Id for the entire orderList
var.limit.client.order.id <- 'limit.client.order.id_example' # character | A unique Id for the limit order
var.limit.iceberg.qty <- 3.4 # numeric | 
var.stop.client.order.id <- 'stop.client.order.id_example' # character | A unique Id for the stop loss/stop loss limit leg
var.stop.limit.price <- 3.4 # numeric | If provided, stopLimitTimeInForce is required.
var.stop.iceberg.qty <- 3.4 # numeric | 
var.stop.limit.time.in.force <- 'stop.limit.time.in.force_example' # character | 
var.new.order.resp.type <- 'new.order.resp.type_example' # character | Set the response JSON.
var.side.effect.type <- 'side.effect.type_example' # character | Default NO_SIDE_EFFECT
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#New OCO (TRADE)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OrderOcoPost(var.symbol, var.side, var.quantity, var.price, var.stop.price, list.client.order.id=var.list.client.order.id, limit.client.order.id=var.limit.client.order.id, limit.iceberg.qty=var.limit.iceberg.qty, stop.client.order.id=var.stop.client.order.id, stop.limit.price=var.stop.limit.price, stop.iceberg.qty=var.stop.iceberg.qty, stop.limit.time.in.force=var.stop.limit.time.in.force, new.order.resp.type=var.new.order.resp.type, side.effect.type=var.side.effect.type, recv.window=var.recv.window)


####################  ApiV3OrderPost  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.side <- 'SELL' # character | SELL or BUY
var.type <- 'type_example' # character | Order type
var.time.in.force <- 'time.in.force_example' # character | Order time in force
var.quantity <- 3.4 # numeric | Order quantity
var.quote.order.qty <- 3.4 # numeric | Quote quantity
var.price <- 3.4 # numeric | Order price
var.new.client.order.id <- 'new.client.order.id_example' # character | Used to uniquely identify this cancel. Automatically generated by default
var.stop.price <- 20.01 # numeric | Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
var.iceberg.qty <- 3.4 # numeric | Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
var.new.order.resp.type <- 'new.order.resp.type_example' # character | Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#New Order (TRADE)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OrderPost(var.symbol, var.side, var.type, time.in.force=var.time.in.force, quantity=var.quantity, quote.order.qty=var.quote.order.qty, price=var.price, new.client.order.id=var.new.client.order.id, stop.price=var.stop.price, iceberg.qty=var.iceberg.qty, new.order.resp.type=var.new.order.resp.type, recv.window=var.recv.window)


####################  ApiV3OrderTestPost  ####################

library(binanceRapi)
var.symbol <- 'BNBUSDT' # character | Trading symbol, e.g. BNBUSDT
var.side <- 'SELL' # character | SELL or BUY
var.type <- 'type_example' # character | Order type
var.time.in.force <- 'time.in.force_example' # character | Order time in force
var.quantity <- 3.4 # numeric | Order quantity
var.quote.order.qty <- 3.4 # numeric | Quote quantity
var.price <- 3.4 # numeric | Order price
var.new.client.order.id <- 'new.client.order.id_example' # character | Used to uniquely identify this cancel. Automatically generated by default
var.stop.price <- 20.01 # numeric | Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
var.iceberg.qty <- 3.4 # numeric | Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
var.new.order.resp.type <- 'new.order.resp.type_example' # character | Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK.
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Test New Order (TRADE)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3OrderTestPost(var.symbol, var.side, var.type, time.in.force=var.time.in.force, quantity=var.quantity, quote.order.qty=var.quote.order.qty, price=var.price, new.client.order.id=var.new.client.order.id, stop.price=var.stop.price, iceberg.qty=var.iceberg.qty, new.order.resp.type=var.new.order.resp.type, recv.window=var.recv.window)


####################  ApiV3RateLimitOrderGet  ####################

library(binanceRapi)
var.recv.window <- 5000 # integer | The value cannot be greater than 60000

#Query Current Order Count Usage (TRADE)
api.instance <- TradeApi$new()

result <- api.instance$ApiV3RateLimitOrderGet(recv.window=var.recv.window)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TradeApi$new()}}
\item \href{#method-ApiV3AccountGet}{\code{TradeApi$ApiV3AccountGet()}}
\item \href{#method-ApiV3AccountGetWithHttpInfo}{\code{TradeApi$ApiV3AccountGetWithHttpInfo()}}
\item \href{#method-ApiV3AllOrderListGet}{\code{TradeApi$ApiV3AllOrderListGet()}}
\item \href{#method-ApiV3AllOrderListGetWithHttpInfo}{\code{TradeApi$ApiV3AllOrderListGetWithHttpInfo()}}
\item \href{#method-ApiV3AllOrdersGet}{\code{TradeApi$ApiV3AllOrdersGet()}}
\item \href{#method-ApiV3AllOrdersGetWithHttpInfo}{\code{TradeApi$ApiV3AllOrdersGetWithHttpInfo()}}
\item \href{#method-ApiV3MyTradesGet}{\code{TradeApi$ApiV3MyTradesGet()}}
\item \href{#method-ApiV3MyTradesGetWithHttpInfo}{\code{TradeApi$ApiV3MyTradesGetWithHttpInfo()}}
\item \href{#method-ApiV3OpenOrderListGet}{\code{TradeApi$ApiV3OpenOrderListGet()}}
\item \href{#method-ApiV3OpenOrderListGetWithHttpInfo}{\code{TradeApi$ApiV3OpenOrderListGetWithHttpInfo()}}
\item \href{#method-ApiV3OpenOrdersDelete}{\code{TradeApi$ApiV3OpenOrdersDelete()}}
\item \href{#method-ApiV3OpenOrdersDeleteWithHttpInfo}{\code{TradeApi$ApiV3OpenOrdersDeleteWithHttpInfo()}}
\item \href{#method-ApiV3OpenOrdersGet}{\code{TradeApi$ApiV3OpenOrdersGet()}}
\item \href{#method-ApiV3OpenOrdersGetWithHttpInfo}{\code{TradeApi$ApiV3OpenOrdersGetWithHttpInfo()}}
\item \href{#method-ApiV3OrderDelete}{\code{TradeApi$ApiV3OrderDelete()}}
\item \href{#method-ApiV3OrderDeleteWithHttpInfo}{\code{TradeApi$ApiV3OrderDeleteWithHttpInfo()}}
\item \href{#method-ApiV3OrderGet}{\code{TradeApi$ApiV3OrderGet()}}
\item \href{#method-ApiV3OrderGetWithHttpInfo}{\code{TradeApi$ApiV3OrderGetWithHttpInfo()}}
\item \href{#method-ApiV3OrderListDelete}{\code{TradeApi$ApiV3OrderListDelete()}}
\item \href{#method-ApiV3OrderListDeleteWithHttpInfo}{\code{TradeApi$ApiV3OrderListDeleteWithHttpInfo()}}
\item \href{#method-ApiV3OrderListGet}{\code{TradeApi$ApiV3OrderListGet()}}
\item \href{#method-ApiV3OrderListGetWithHttpInfo}{\code{TradeApi$ApiV3OrderListGetWithHttpInfo()}}
\item \href{#method-ApiV3OrderOcoPost}{\code{TradeApi$ApiV3OrderOcoPost()}}
\item \href{#method-ApiV3OrderOcoPostWithHttpInfo}{\code{TradeApi$ApiV3OrderOcoPostWithHttpInfo()}}
\item \href{#method-ApiV3OrderPost}{\code{TradeApi$ApiV3OrderPost()}}
\item \href{#method-ApiV3OrderPostWithHttpInfo}{\code{TradeApi$ApiV3OrderPostWithHttpInfo()}}
\item \href{#method-ApiV3OrderTestPost}{\code{TradeApi$ApiV3OrderTestPost()}}
\item \href{#method-ApiV3OrderTestPostWithHttpInfo}{\code{TradeApi$ApiV3OrderTestPostWithHttpInfo()}}
\item \href{#method-ApiV3RateLimitOrderGet}{\code{TradeApi$ApiV3RateLimitOrderGet()}}
\item \href{#method-ApiV3RateLimitOrderGetWithHttpInfo}{\code{TradeApi$ApiV3RateLimitOrderGetWithHttpInfo()}}
\item \href{#method-clone}{\code{TradeApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3AccountGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3AccountGet}{}}}
\subsection{Method \code{ApiV3AccountGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3AccountGet(recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3AccountGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3AccountGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3AccountGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3AccountGetWithHttpInfo(recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3AllOrderListGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3AllOrderListGet}{}}}
\subsection{Method \code{ApiV3AllOrderListGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3AllOrderListGet(
  from.id = NULL,
  start.time = NULL,
  end.time = NULL,
  limit = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3AllOrderListGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3AllOrderListGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3AllOrderListGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3AllOrderListGetWithHttpInfo(
  from.id = NULL,
  start.time = NULL,
  end.time = NULL,
  limit = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3AllOrdersGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3AllOrdersGet}{}}}
\subsection{Method \code{ApiV3AllOrdersGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3AllOrdersGet(
  symbol,
  order.id = NULL,
  start.time = NULL,
  end.time = NULL,
  limit = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3AllOrdersGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3AllOrdersGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3AllOrdersGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3AllOrdersGetWithHttpInfo(
  symbol,
  order.id = NULL,
  start.time = NULL,
  end.time = NULL,
  limit = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3MyTradesGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3MyTradesGet}{}}}
\subsection{Method \code{ApiV3MyTradesGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3MyTradesGet(
  symbol,
  order.id = NULL,
  start.time = NULL,
  end.time = NULL,
  from.id = NULL,
  limit = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3MyTradesGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3MyTradesGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3MyTradesGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3MyTradesGetWithHttpInfo(
  symbol,
  order.id = NULL,
  start.time = NULL,
  end.time = NULL,
  from.id = NULL,
  limit = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OpenOrderListGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OpenOrderListGet}{}}}
\subsection{Method \code{ApiV3OpenOrderListGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OpenOrderListGet(recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OpenOrderListGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OpenOrderListGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OpenOrderListGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OpenOrderListGetWithHttpInfo(recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OpenOrdersDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OpenOrdersDelete}{}}}
\subsection{Method \code{ApiV3OpenOrdersDelete()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OpenOrdersDelete(symbol, recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OpenOrdersDeleteWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OpenOrdersDeleteWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OpenOrdersDeleteWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OpenOrdersDeleteWithHttpInfo(symbol, recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OpenOrdersGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OpenOrdersGet}{}}}
\subsection{Method \code{ApiV3OpenOrdersGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OpenOrdersGet(symbol = NULL, recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OpenOrdersGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OpenOrdersGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OpenOrdersGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OpenOrdersGetWithHttpInfo(symbol = NULL, recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderDelete}{}}}
\subsection{Method \code{ApiV3OrderDelete()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderDelete(
  symbol,
  order.id = NULL,
  orig.client.order.id = NULL,
  new.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderDeleteWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderDeleteWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OrderDeleteWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderDeleteWithHttpInfo(
  symbol,
  order.id = NULL,
  orig.client.order.id = NULL,
  new.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderGet}{}}}
\subsection{Method \code{ApiV3OrderGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderGet(
  symbol,
  order.id = NULL,
  orig.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OrderGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderGetWithHttpInfo(
  symbol,
  order.id = NULL,
  orig.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderListDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderListDelete}{}}}
\subsection{Method \code{ApiV3OrderListDelete()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderListDelete(
  symbol,
  order.list.id = NULL,
  list.client.order.id = NULL,
  new.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderListDeleteWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderListDeleteWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OrderListDeleteWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderListDeleteWithHttpInfo(
  symbol,
  order.list.id = NULL,
  list.client.order.id = NULL,
  new.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderListGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderListGet}{}}}
\subsection{Method \code{ApiV3OrderListGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderListGet(
  order.list.id = NULL,
  orig.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderListGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderListGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OrderListGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderListGetWithHttpInfo(
  order.list.id = NULL,
  orig.client.order.id = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderOcoPost"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderOcoPost}{}}}
\subsection{Method \code{ApiV3OrderOcoPost()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderOcoPost(
  symbol,
  side,
  quantity,
  price,
  stop.price,
  list.client.order.id = NULL,
  limit.client.order.id = NULL,
  limit.iceberg.qty = NULL,
  stop.client.order.id = NULL,
  stop.limit.price = NULL,
  stop.iceberg.qty = NULL,
  stop.limit.time.in.force = NULL,
  new.order.resp.type = NULL,
  side.effect.type = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderOcoPostWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderOcoPostWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OrderOcoPostWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderOcoPostWithHttpInfo(
  symbol,
  side,
  quantity,
  price,
  stop.price,
  list.client.order.id = NULL,
  limit.client.order.id = NULL,
  limit.iceberg.qty = NULL,
  stop.client.order.id = NULL,
  stop.limit.price = NULL,
  stop.iceberg.qty = NULL,
  stop.limit.time.in.force = NULL,
  new.order.resp.type = NULL,
  side.effect.type = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderPost"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderPost}{}}}
\subsection{Method \code{ApiV3OrderPost()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderPost(
  symbol,
  side,
  type,
  time.in.force = NULL,
  quantity = NULL,
  quote.order.qty = NULL,
  price = NULL,
  new.client.order.id = NULL,
  stop.price = NULL,
  iceberg.qty = NULL,
  new.order.resp.type = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderPostWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderPostWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OrderPostWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderPostWithHttpInfo(
  symbol,
  side,
  type,
  time.in.force = NULL,
  quantity = NULL,
  quote.order.qty = NULL,
  price = NULL,
  new.client.order.id = NULL,
  stop.price = NULL,
  iceberg.qty = NULL,
  new.order.resp.type = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderTestPost"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderTestPost}{}}}
\subsection{Method \code{ApiV3OrderTestPost()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderTestPost(
  symbol,
  side,
  type,
  time.in.force = NULL,
  quantity = NULL,
  quote.order.qty = NULL,
  price = NULL,
  new.client.order.id = NULL,
  stop.price = NULL,
  iceberg.qty = NULL,
  new.order.resp.type = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3OrderTestPostWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3OrderTestPostWithHttpInfo}{}}}
\subsection{Method \code{ApiV3OrderTestPostWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3OrderTestPostWithHttpInfo(
  symbol,
  side,
  type,
  time.in.force = NULL,
  quantity = NULL,
  quote.order.qty = NULL,
  price = NULL,
  new.client.order.id = NULL,
  stop.price = NULL,
  iceberg.qty = NULL,
  new.order.resp.type = NULL,
  recv.window = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3RateLimitOrderGet"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3RateLimitOrderGet}{}}}
\subsection{Method \code{ApiV3RateLimitOrderGet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3RateLimitOrderGet(recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3RateLimitOrderGetWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3RateLimitOrderGetWithHttpInfo}{}}}
\subsection{Method \code{ApiV3RateLimitOrderGetWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$ApiV3RateLimitOrderGetWithHttpInfo(recv.window = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TradeApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
