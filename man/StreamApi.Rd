% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream_api.R
\docType{class}
\name{StreamApi}
\alias{StreamApi}
\title{Stream operations}
\format{
An \code{R6Class} generator object
}
\description{
binanceRapi.Stream
}
\section{Methods}{

\describe{
\strong{ ApiV3UserDataStreamDelete } \emph{ Close a ListenKey (USER_STREAM) }
Close out a user data stream.  Weight: 1

\itemize{
\item \emph{ @param } listen.key character


\item status code : 200 | OK

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3UserDataStreamPost } \emph{ Create a ListenKey (USER_STREAM) }
Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active &#x60;listenKey&#x60;, that &#x60;listenKey&#x60; will be returned and its validity will be extended for 60 minutes.  Weight: 1

\itemize{
\item \emph{ @returnType } \link{InlineResponse20070} \cr


\item status code : 200 | Listen key

\item return type : InlineResponse20070 
\item response headers :

\tabular{ll}{
}
}

\strong{ ApiV3UserDataStreamPut } \emph{ Ping/Keep-alive a ListenKey (USER_STREAM) }
Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It&#39;s recommended to send a ping about every 30 minutes.  Weight: 1

\itemize{
\item \emph{ @param } listen.key character


\item status code : 200 | OK

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  ApiV3UserDataStreamDelete  ####################

library(binanceRapi)
var.listen.key <- 'pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1' # character | User websocket listen key

#Close a ListenKey (USER_STREAM)
api.instance <- StreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$ApiV3UserDataStreamDelete(listen.key=var.listen.key)


####################  ApiV3UserDataStreamPost  ####################

library(binanceRapi)

#Create a ListenKey (USER_STREAM)
api.instance <- StreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$ApiV3UserDataStreamPost()


####################  ApiV3UserDataStreamPut  ####################

library(binanceRapi)
var.listen.key <- 'pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1' # character | User websocket listen key

#Ping/Keep-alive a ListenKey (USER_STREAM)
api.instance <- StreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$ApiV3UserDataStreamPut(listen.key=var.listen.key)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{StreamApi$new()}}
\item \href{#method-ApiV3UserDataStreamDelete}{\code{StreamApi$ApiV3UserDataStreamDelete()}}
\item \href{#method-ApiV3UserDataStreamDeleteWithHttpInfo}{\code{StreamApi$ApiV3UserDataStreamDeleteWithHttpInfo()}}
\item \href{#method-ApiV3UserDataStreamPost}{\code{StreamApi$ApiV3UserDataStreamPost()}}
\item \href{#method-ApiV3UserDataStreamPostWithHttpInfo}{\code{StreamApi$ApiV3UserDataStreamPostWithHttpInfo()}}
\item \href{#method-ApiV3UserDataStreamPut}{\code{StreamApi$ApiV3UserDataStreamPut()}}
\item \href{#method-ApiV3UserDataStreamPutWithHttpInfo}{\code{StreamApi$ApiV3UserDataStreamPutWithHttpInfo()}}
\item \href{#method-clone}{\code{StreamApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3UserDataStreamDelete"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3UserDataStreamDelete}{}}}
\subsection{Method \code{ApiV3UserDataStreamDelete()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$ApiV3UserDataStreamDelete(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3UserDataStreamDeleteWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3UserDataStreamDeleteWithHttpInfo}{}}}
\subsection{Method \code{ApiV3UserDataStreamDeleteWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$ApiV3UserDataStreamDeleteWithHttpInfo(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3UserDataStreamPost"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3UserDataStreamPost}{}}}
\subsection{Method \code{ApiV3UserDataStreamPost()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$ApiV3UserDataStreamPost(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3UserDataStreamPostWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3UserDataStreamPostWithHttpInfo}{}}}
\subsection{Method \code{ApiV3UserDataStreamPostWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$ApiV3UserDataStreamPostWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3UserDataStreamPut"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3UserDataStreamPut}{}}}
\subsection{Method \code{ApiV3UserDataStreamPut()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$ApiV3UserDataStreamPut(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiV3UserDataStreamPutWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ApiV3UserDataStreamPutWithHttpInfo}{}}}
\subsection{Method \code{ApiV3UserDataStreamPutWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$ApiV3UserDataStreamPutWithHttpInfo(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{StreamApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
