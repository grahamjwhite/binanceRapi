% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/isolated_margin_stream_api.R
\docType{class}
\name{IsolatedMarginStreamApi}
\alias{IsolatedMarginStreamApi}
\title{IsolatedMarginStream operations}
\format{
An \code{R6Class} generator object
}
\description{
binanceRapi.IsolatedMarginStream
}
\section{Methods}{

\describe{
\strong{ SapiV1UserDataStreamIsolatedDelete } \emph{ Close a ListenKey (USER_STREAM) }
Close out a user data stream.  Weight: 1

\itemize{
\item \emph{ @param } listen.key character


\item status code : 200 | OK

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ SapiV1UserDataStreamIsolatedPost } \emph{ Generate a Listen Key (USER_STREAM) }
Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active &#x60;listenKey&#x60;, that &#x60;listenKey&#x60; will be returned and its validity will be extended for 60 minutes.  Weight: 1

\itemize{
\item \emph{ @returnType } \link{InlineResponse20078} \cr


\item status code : 200 | Isolated margin listen key

\item return type : InlineResponse20078 
\item response headers :

\tabular{ll}{
}
}

\strong{ SapiV1UserDataStreamIsolatedPut } \emph{ Ping/Keep-alive a Listen Key (USER_STREAM) }
Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It&#39;s recommended to send a ping about every 30 minutes.  Weight: 1

\itemize{
\item \emph{ @param } listen.key character


\item status code : 200 | OK

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  SapiV1UserDataStreamIsolatedDelete  ####################

library(binanceRapi)
var.listen.key <- 'pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1' # character | User websocket listen key

#Close a ListenKey (USER_STREAM)
api.instance <- IsolatedMarginStreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$SapiV1UserDataStreamIsolatedDelete(listen.key=var.listen.key)


####################  SapiV1UserDataStreamIsolatedPost  ####################

library(binanceRapi)

#Generate a Listen Key (USER_STREAM)
api.instance <- IsolatedMarginStreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$SapiV1UserDataStreamIsolatedPost()


####################  SapiV1UserDataStreamIsolatedPut  ####################

library(binanceRapi)
var.listen.key <- 'pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1' # character | User websocket listen key

#Ping/Keep-alive a Listen Key (USER_STREAM)
api.instance <- IsolatedMarginStreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$SapiV1UserDataStreamIsolatedPut(listen.key=var.listen.key)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{IsolatedMarginStreamApi$new()}}
\item \href{#method-SapiV1UserDataStreamIsolatedDelete}{\code{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedDelete()}}
\item \href{#method-SapiV1UserDataStreamIsolatedDeleteWithHttpInfo}{\code{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedDeleteWithHttpInfo()}}
\item \href{#method-SapiV1UserDataStreamIsolatedPost}{\code{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPost()}}
\item \href{#method-SapiV1UserDataStreamIsolatedPostWithHttpInfo}{\code{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPostWithHttpInfo()}}
\item \href{#method-SapiV1UserDataStreamIsolatedPut}{\code{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPut()}}
\item \href{#method-SapiV1UserDataStreamIsolatedPutWithHttpInfo}{\code{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPutWithHttpInfo()}}
\item \href{#method-clone}{\code{IsolatedMarginStreamApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamIsolatedDelete"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamIsolatedDelete}{}}}
\subsection{Method \code{SapiV1UserDataStreamIsolatedDelete()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedDelete(
  listen.key = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamIsolatedDeleteWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamIsolatedDeleteWithHttpInfo}{}}}
\subsection{Method \code{SapiV1UserDataStreamIsolatedDeleteWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedDeleteWithHttpInfo(
  listen.key = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamIsolatedPost"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamIsolatedPost}{}}}
\subsection{Method \code{SapiV1UserDataStreamIsolatedPost()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPost(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamIsolatedPostWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamIsolatedPostWithHttpInfo}{}}}
\subsection{Method \code{SapiV1UserDataStreamIsolatedPostWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPostWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamIsolatedPut"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamIsolatedPut}{}}}
\subsection{Method \code{SapiV1UserDataStreamIsolatedPut()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPut(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamIsolatedPutWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamIsolatedPutWithHttpInfo}{}}}
\subsection{Method \code{SapiV1UserDataStreamIsolatedPutWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$SapiV1UserDataStreamIsolatedPutWithHttpInfo(
  listen.key = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IsolatedMarginStreamApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
