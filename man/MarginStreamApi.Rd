% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margin_stream_api.R
\docType{class}
\name{MarginStreamApi}
\alias{MarginStreamApi}
\title{MarginStream operations}
\format{
An \code{R6Class} generator object
}
\description{
binanceRapi.MarginStream
}
\section{Methods}{

\describe{
\strong{ SapiV1UserDataStreamDelete } \emph{ Close a ListenKey (USER_STREAM) }
Close out a user data stream.  Weight: 1

\itemize{
\item \emph{ @param } listen.key character


\item status code : 200 | OK

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

\strong{ SapiV1UserDataStreamPost } \emph{ Create a ListenKey (USER_STREAM) }
Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent. If the account has an active &#x60;listenKey&#x60;, that &#x60;listenKey&#x60; will be returned and its validity will be extended for 60 minutes.  Weight: 1

\itemize{
\item \emph{ @returnType } \link{InlineResponse20070} \cr


\item status code : 200 | Margin listen key

\item return type : InlineResponse20070 
\item response headers :

\tabular{ll}{
}
}

\strong{ SapiV1UserDataStreamPut } \emph{ Ping/Keep-alive a ListenKey (USER_STREAM) }
Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It&#39;s recommended to send a ping about every 30 minutes.  Weight: 1

\itemize{
\item \emph{ @param } listen.key character


\item status code : 200 | OK

\item return type : object 
\item response headers :

\tabular{ll}{
}
\item status code : 400 | Bad Request

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  SapiV1UserDataStreamDelete  ####################

library(binanceRapi)
var.listen.key <- 'pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1' # character | User websocket listen key

#Close a ListenKey (USER_STREAM)
api.instance <- MarginStreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$SapiV1UserDataStreamDelete(listen.key=var.listen.key)


####################  SapiV1UserDataStreamPost  ####################

library(binanceRapi)

#Create a ListenKey (USER_STREAM)
api.instance <- MarginStreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$SapiV1UserDataStreamPost()


####################  SapiV1UserDataStreamPut  ####################

library(binanceRapi)
var.listen.key <- 'pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1' # character | User websocket listen key

#Ping/Keep-alive a ListenKey (USER_STREAM)
api.instance <- MarginStreamApi$new()

#Configure API key authorization: ApiKeyAuth
api.instance$apiClient$apiKeys['X-MBX-APIKEY'] <- 'TODO_YOUR_API_KEY';

result <- api.instance$SapiV1UserDataStreamPut(listen.key=var.listen.key)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{MarginStreamApi$new()}}
\item \href{#method-SapiV1UserDataStreamDelete}{\code{MarginStreamApi$SapiV1UserDataStreamDelete()}}
\item \href{#method-SapiV1UserDataStreamDeleteWithHttpInfo}{\code{MarginStreamApi$SapiV1UserDataStreamDeleteWithHttpInfo()}}
\item \href{#method-SapiV1UserDataStreamPost}{\code{MarginStreamApi$SapiV1UserDataStreamPost()}}
\item \href{#method-SapiV1UserDataStreamPostWithHttpInfo}{\code{MarginStreamApi$SapiV1UserDataStreamPostWithHttpInfo()}}
\item \href{#method-SapiV1UserDataStreamPut}{\code{MarginStreamApi$SapiV1UserDataStreamPut()}}
\item \href{#method-SapiV1UserDataStreamPutWithHttpInfo}{\code{MarginStreamApi$SapiV1UserDataStreamPutWithHttpInfo()}}
\item \href{#method-clone}{\code{MarginStreamApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamDelete"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamDelete}{}}}
\subsection{Method \code{SapiV1UserDataStreamDelete()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$SapiV1UserDataStreamDelete(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamDeleteWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamDeleteWithHttpInfo}{}}}
\subsection{Method \code{SapiV1UserDataStreamDeleteWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$SapiV1UserDataStreamDeleteWithHttpInfo(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamPost"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamPost}{}}}
\subsection{Method \code{SapiV1UserDataStreamPost()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$SapiV1UserDataStreamPost(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamPostWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamPostWithHttpInfo}{}}}
\subsection{Method \code{SapiV1UserDataStreamPostWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$SapiV1UserDataStreamPostWithHttpInfo(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamPut"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamPut}{}}}
\subsection{Method \code{SapiV1UserDataStreamPut()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$SapiV1UserDataStreamPut(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SapiV1UserDataStreamPutWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-SapiV1UserDataStreamPutWithHttpInfo}{}}}
\subsection{Method \code{SapiV1UserDataStreamPutWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$SapiV1UserDataStreamPutWithHttpInfo(listen.key = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MarginStreamApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
